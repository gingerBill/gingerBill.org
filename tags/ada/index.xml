<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ada on gingerBill</title>
    <link>/tags/ada/</link>
    <description>Recent content in ada on gingerBill</description>
    <language>en-gb</language>
    <lastBuildDate>Sun, 07 Mar 2021 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/tags/ada/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Untyped Types</title>
      <link>/article/2021/03/07/untyped-types/</link>
      <pubDate>Sun, 07 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>/article/2021/03/07/untyped-types/</guid>
      <description>When I was designing the constant value system in Odin, I wanted literals (especially numbers) to &amp;ldquo;just work&amp;rdquo;. I was inspired by how both Ada1 and Go2 both handled their constant value systems. But this lead me to a realization that there are two general different models of thought when it comes to values in programming languages.
Model-1: Expressions have a type, not all expressions may have a value. Therefore all values must have a type.</description>
    </item>
    
  </channel>
</rss>
