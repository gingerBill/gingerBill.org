<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Articles on gingerBill</title>
    <link>/article/</link>
    <description>Recent content in Articles on gingerBill</description>
    <language>en-gb</language>
    <lastBuildDate>Mon, 22 Jan 2024 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/article/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Why I Hate Language Benchmarks</title>
      <link>/article/2024/01/22/comparing-language-benchmarks/</link>
      <pubDate>Mon, 22 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>/article/2024/01/22/comparing-language-benchmarks/</guid>
      <description>[Originally from a Twitter Thread]
Original Twitter Post
I don&amp;rsquo;t know if I have &amp;ldquo;ranted&amp;rdquo; about this here before but:
I absolutely HATE comparing programming languages with &amp;ldquo;benchmarks&amp;rdquo;.
Language benchmarks rarely ever actually test for anything useful when comparing one language against another. This goes for ANY language.
Even in the best case scenario: you are comparing different compilers for the same language (and the same input). This means that you are just comparing how well the optimizing backends work for those compilers.</description>
    </item>
    
    <item>
      <title>Reverse Engineering Alembic</title>
      <link>/article/2022/07/11/reverse-engineering-alembic/</link>
      <pubDate>Mon, 11 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>/article/2022/07/11/reverse-engineering-alembic/</guid>
      <description>For my work at JangaFX, we require the use of the Alembic interchange file format. We have been using other libraries which wrap reading the Alembic file format but because it is not the native library, it has numerous issues due to the generic interface.
I spent nearly 4 days trying to get the official Alembic C++ API, https://github.com/alembic/alembic/, to compile correctly and then use the API itself. Numerous times the compilation would get corrupted (it compiled but none of the tests even ran) and when I got it work (on another machine), the API itself was a labyrinth to navigate.</description>
    </item>
    
    <item>
      <title>Multiple Return Values Research</title>
      <link>/article/2021/12/15/multiple-return-values-research/</link>
      <pubDate>Wed, 15 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>/article/2021/12/15/multiple-return-values-research/</guid>
      <description>I have recently been thinking about multiple return values as a concept, and wondering if there has been any kind of literature into the topic of &amp;ldquo;true&amp;rdquo; multiple return values which are not emulated through tuples. My current working hypothesis is that I think I have come to the conclusion (unless there is evidence to the contrary) Odin has invented a new kind of type system, something to the akin of polyadic expressions.</description>
    </item>
    
    <item>
      <title>Memory Allocation Strategies - Part 6</title>
      <link>/article/2021/12/02/memory-allocation-strategies-006/</link>
      <pubDate>Thu, 02 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>/article/2021/12/02/memory-allocation-strategies-006/</guid>
      <description>Buddy Memory Allocation In the previous article, we discussed the free list allocator and how it is commonly implemented with a linked list or a red-black tree. In this article, the Buddy Algorithm and how it applies to memory allocation strategies.
In the previous article, the red black tree approach was briefly discussed as a way to improve the time complexity for searching for a free memory block, and get best-fit as a consequence.</description>
    </item>
    
    <item>
      <title>Memory Allocation Strategies - Part 5</title>
      <link>/article/2021/11/30/memory-allocation-strategies-005/</link>
      <pubDate>Tue, 30 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>/article/2021/11/30/memory-allocation-strategies-005/</guid>
      <description>Free List Based Allocation In the previous article, we looked at the pool allocator, which splits the supplied backing buffer into chunks of equal size and keeps track of which of the chunks are free. Pool allocators are fast allocators that allow for out of order free in constant time O(1) whilst keeping very little fragmentation. The main restriction of a pool allocator is that every memory allocation must be of the same size.</description>
    </item>
    
    <item>
      <title>The Value Propagation Experiment Part 2</title>
      <link>/article/2021/09/06/value-propagation-experiment-part-2/</link>
      <pubDate>Mon, 06 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>/article/2021/09/06/value-propagation-experiment-part-2/</guid>
      <description>**[Originally from a Twitter Thread]**
I have revisited The Value Propagation Experiment and have come to a different conclusion as to why it failed and how I recovered it.
The recovery work has been merged into master now with this PR: https://github.com/odin-lang/Odin/pull/1082
I think there were three things which were confusing which make it look like a failure of an experiment:
try was a confusing name for what the semantics were.</description>
    </item>
    
    <item>
      <title>The Value Propagation Experiment</title>
      <link>/article/2021/07/05/value-propagation-experiment/</link>
      <pubDate>Mon, 05 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>/article/2021/07/05/value-propagation-experiment/</guid>
      <description>[Originally from a Twitter Thread]
Part 2 of this Experiment
The Idea I recently experimented with adding a feature into Odin which allowed for a way to propagate a value by early returning if that value was false or not nil. It was in a similar vein to Rust&amp;rsquo;s try! which became ?, or Zig&amp;rsquo;s try, etc.
I have now removed it from Odin. But why?
The Problem The hypothesis was that that this idiom was common:</description>
    </item>
    
    <item>
      <title>Untyped Types</title>
      <link>/article/2021/03/07/untyped-types/</link>
      <pubDate>Sun, 07 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>/article/2021/03/07/untyped-types/</guid>
      <description>When I was designing the constant value system in Odin, I wanted literals (especially numbers) to &amp;ldquo;just work&amp;rdquo;. I was inspired by how both Ada1 and Go2 both handled their constant value systems. But this lead me to a realization that there are two general different models of thought when it comes to values in programming languages.
Model-1: Expressions have a type, not all expressions may have a value. Therefore all values must have a type.</description>
    </item>
    
    <item>
      <title>Structured Control Flow (Brain Dump)</title>
      <link>/article/2021/02/02/structured-control-flow/</link>
      <pubDate>Tue, 02 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>/article/2021/02/02/structured-control-flow/</guid>
      <description>Note: This is a &amp;ldquo;brain dump&amp;rdquo; article, and subject to be cleaned up.
Categories of Structured Control Flow Procedure call foo(123, true) Terminating return Conditional if, if-else, switch Looping for - loop with initial statement, condition, post statement, and body for-in - loop with a value to be iterated over while - loop with condition then body do-while - loop with body then condition Branching break - go to end outside of the control statement continue - skip to the end of a loop fallthrough - merge two switch case bodies, to have multiple entry points to the merged body Labels on other control flow statements Deferred defer/scope(exit) Pseudo/Partial Categories Structured Exception Handling (not specifically Microsoft&amp;rsquo;s SEH try, catch Default (named) return values foo :: proc(x: int) -&amp;gt; (val: int, err: Error) { .</description>
    </item>
    
    <item>
      <title>The Essence of Programming</title>
      <link>/article/2021/02/01/the-essence-of-programming/</link>
      <pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>/article/2021/02/01/the-essence-of-programming/</guid>
      <description>One thing I have noticed a lot when a programmer is struggling to solve a problem, especially a novice, is that he is stuck worrying about the &amp;ldquo;best way&amp;rdquo; to implement the solution rather than actually understanding the problem he has. I believe a lot of this stems from not understanding the essence of what programming fundamentally is.
Essentially Ordered Aspects In a previous article of mine, I state that &amp;ldquo;Programming is a tool to solve problems that you have in the domain of computers&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>The Fatal Flaw of Ownership Semantics</title>
      <link>/article/2020/06/21/the-ownership-semantics-flaw/</link>
      <pubDate>Sun, 21 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/article/2020/06/21/the-ownership-semantics-flaw/</guid>
      <description>I have been toying with a theoretical idea for the past 18 months off-and-on in my head and I have not fully articulated it aloud yet. It is regarding the concept of Ownership Semantics (OS) or Move Semantics in programming languages. Fundamentally this article is a criticism of the concept and states that the concept is a duality of traditional OOP but applied to a different area.
General Definitions of Terminology A general list of definitions of terminology used within this article in order to minimize confusion.</description>
    </item>
    
    <item>
      <title>Flash Fads Model (Audio Article)</title>
      <link>/article/2020/06/13/flash-fads-model/</link>
      <pubDate>Sat, 13 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/article/2020/06/13/flash-fads-model/</guid>
      <description>Audio Article:</description>
    </item>
    
    <item>
      <title>Pragmatism in Programming Proverbs</title>
      <link>/article/2020/05/31/progamming-pragmatist-proverbs/</link>
      <pubDate>Sun, 31 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/article/2020/05/31/progamming-pragmatist-proverbs/</guid>
      <description>I was originally going to write a normal prose article regarding the topic of Pragmatism in Programming, however I thought I&amp;rsquo;d experiment in style by writing in a proverbial style.
The following concepts express the school of thought that I subscribe to which I call Pragmatism in Programming.
Proverbs written by Ginger Bill The concept of programming Programming is a tool to solve problems that you have in the domain of computers</description>
    </item>
    
    <item>
      <title>Relative Pointers</title>
      <link>/article/2020/05/17/relative-pointers/</link>
      <pubDate>Sun, 17 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/article/2020/05/17/relative-pointers/</guid>
      <description>Absolute Pointers Pointers are a value type in programming languages that store a memory address. A pointer references a location in memory, and obtaining the value stored at this location in memory is known as dereferencing a pointer. Pointers are part and parcel of using languages like C, and are an extremely powerful tool. Pointers can be treated as a form of reference type, a value that refers to another typed value in memory.</description>
    </item>
    
    <item>
      <title>A Reply to _Let&#39;s stop copying C_</title>
      <link>/article/2020/01/25/a-reply-to-lets-stop-copying-c/</link>
      <pubDate>Sat, 25 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>/article/2020/01/25/a-reply-to-lets-stop-copying-c/</guid>
      <description>I read the article Let&amp;rsquo;s stop copying C about 3 years ago. Recently someone brought it up again and I thought I would comment on the points being made. The article argues that newer languages ought not to copy the mistakes of C and comment on may of C&amp;rsquo;s mistakes.
I recommend reading the original article first before reading this one as I will be commenting directly on the subsections of the article.</description>
    </item>
    
    <item>
      <title>A Reply to _The Road to Zig 1.0_</title>
      <link>/article/2019/05/13/a-reply-to-the-road-to-zig/</link>
      <pubDate>Mon, 13 May 2019 00:00:00 +0000</pubDate>
      
      <guid>/article/2019/05/13/a-reply-to-the-road-to-zig/</guid>
      <description>It is lovely to see many new programming languages being produced to solve different issues that the designers are trying to address. Many of the new big ones include Rust, Go, and Swift, all of which are trying to solve different problems. There are some not-as-big programming languages that I recommend everyone to checkout:
Odin1 Scopes Zig They are all very good languages but with entirely different philosophies behind them. See if one suits your personal philosophy better!</description>
    </item>
    
    <item>
      <title>A Quine in Odin</title>
      <link>/article/2019/03/10/quine-in-odin/</link>
      <pubDate>Sun, 10 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/article/2019/03/10/quine-in-odin/</guid>
      <description>A Quine in Odin:
package quineimport &amp;quot;core:fmt&amp;quot;main :: proc() {fmt.printf(&amp;quot;%s%c%s%c;\n&amp;quot;, s, 0x60, s, 0x60);}s := `package quineimport &amp;quot;core:fmt&amp;quot;main :: proc() {fmt.printf(&amp;quot;%s%c%s%c;\n&amp;quot;, s, 0x60, s, 0x60);}s := `;</description>
    </item>
    
    <item>
      <title>Memory Allocation Strategies - Part 4</title>
      <link>/article/2019/02/16/memory-allocation-strategies-004/</link>
      <pubDate>Sat, 16 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/article/2019/02/16/memory-allocation-strategies-004/</guid>
      <description>Pool-Based Allocation In the previous article, we looked at the stack allocator, which was the natural evolution of the linear/arena allocator. In this article, I will cover the fixed-sized pool allocator.
A pool allocator is a bit different from the previous allocation strategies that I have covered. A pool splits the supplied backing buffer into chunks of equal size and keeps track of which of the chunks are free. When an allocation is wanted, a free chunk is given.</description>
    </item>
    
    <item>
      <title>Memory Allocation Strategies - Part 3</title>
      <link>/article/2019/02/15/memory-allocation-strategies-003/</link>
      <pubDate>Fri, 15 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/article/2019/02/15/memory-allocation-strategies-003/</guid>
      <description>Stack-Like (LIFO) Allocation In the previous article, we looked at the linear/arena allocator, which is the simplest of all memory allocators. In this article, I will cover the fixed-sized stack-like allocator. Throughout this article, I will refer to this allocator as a stack allocator.
Note: A stack-like allocator means that the allocator acts like a data structure following the last-in, first-out (LIFO) principle. This has nothing to do with the stack or the stack frame.</description>
    </item>
    
    <item>
      <title>Memory Allocation Strategies - Part 2</title>
      <link>/article/2019/02/08/memory-allocation-strategies-002/</link>
      <pubDate>Fri, 08 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/article/2019/02/08/memory-allocation-strategies-002/</guid>
      <description>Linear Allocation The first memory allocation strategy that I will cover is also one of the simplest ones: linear allocation. As the name suggests, memory is allocated linearly. Throughout this series, I will be using the concept of an allocator as a means to allocate this memory. A linear allocator, is also known by other names such as an Arena or Region-based allocator. In this article, I will refer to this allocator an a Arena.</description>
    </item>
    
    <item>
      <title>Memory Allocation Strategies - Part 1</title>
      <link>/article/2019/02/01/memory-allocation-strategies-001/</link>
      <pubDate>Fri, 01 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>/article/2019/02/01/memory-allocation-strategies-001/</guid>
      <description>Memory allocation seems to be something many people struggle with. Many languages try to automatically handle memory for you using different strategies: garbage collection (GC), automatic reference counting (ARC), resource acquisition is initialization (RAII), and ownership semantics. However, trying to abstract away memory allocation comes at a higher cost than most people realize.
Most people are taught to think of memory in terms of the stack and the heap, where the stack is automatically grown for a procedure call, and the heap is some magical thing that you can use to get memory that needs to live longer than the stack.</description>
    </item>
    
    <item>
      <title>Exceptions --- And Why Odin Will Never Have Them</title>
      <link>/article/2018/09/05/exceptions---and-why-odin-will-never-have-them/</link>
      <pubDate>Wed, 05 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>/article/2018/09/05/exceptions---and-why-odin-will-never-have-them/</guid>
      <description>Article was originally posted here: https://odin.handmade.network/blogs/p/3372-exceptions_-_and_why_odin_will_never_have_them
Original Comments:
https://github.com/odin-lang/Odin/issues/256#issuecomment-418073701 https://github.com/odin-lang/Odin/issues/256#issuecomment-418289626 There will never be software exceptions in the traditional sense. I hate the entire philosophy behind the concept. Go does have exceptions with the defer, panic, recover approach. They are weird on purpose. Odin could have something similar for exceptional cases. You can the exact same semantics as a try except block by using a switch in statement. The same is true in Go.</description>
    </item>
    
    <item>
      <title>On the Aesthetics of the Syntax of Declarations</title>
      <link>/article/2018/03/12/on-the-aesthetics-of-the-syntax-of-declarations/</link>
      <pubDate>Mon, 12 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/article/2018/03/12/on-the-aesthetics-of-the-syntax-of-declarations/</guid>
      <description>Article was originally posted here: https://odin.handmade.network/blogs/p/2994-on_the_aesthetics_of_the_syntax_of_declarations
n.b. This is a philosophical article and not a technical article. There are no correct answers to the questions that I will pose &amp;ndash; only compromises.
I&amp;rsquo;m considering what the &amp;ldquo;best&amp;rdquo; declaration syntax would be. Historically, there have been two categories: which I will call qualifier-focused and type-focused. An example of qualifier-focused would be the Pascal family. An example of type-focused would be the C family.</description>
    </item>
    
    <item>
      <title>The Metaprogramming Dilemma</title>
      <link>/article/2016/12/01/the-metaprogramming-dilemma/</link>
      <pubDate>Thu, 01 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>/article/2016/12/01/the-metaprogramming-dilemma/</guid>
      <description>Article was originally posted here: https://odin.handmade.network/blogs/p/1723-the_metaprogramming_dilemma
Designing this language has been difficult but fun. Two of the original goals of this language were simplicity and metaprogramming however, these together could be an oxymoron. But before I explain why, I first need to explain what I mean by &amp;ldquo;metaprogramming&amp;rdquo;.
Metaprogramming is an &amp;ldquo;art&amp;rdquo; of writing programs to treats other programs as their data. This means that a program could generate, read, analyse, and transform code or even itself to achieve a certain solution.</description>
    </item>
    
    <item>
      <title>A Defer Statement For C&#43;&#43;11</title>
      <link>/article/2015/08/19/defer-in-cpp/</link>
      <pubDate>Wed, 19 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>/article/2015/08/19/defer-in-cpp/</guid>
      <description>One of my favourite things about Go is the defer statement. The defer statement pushes a function call onto a list; the list of saved calls in called when the function returns.
Imitating this is C++ is impossible. Instead of calling when the function calls, you can call at the end of scope; this is a better approach for C++. This is similar to how D has scope(exit).
C++11 Implementation template &amp;lt;typename F&amp;gt;struct privDefer {F f;privDefer(F f) : f(f) {}~privDefer() { f(); }};template &amp;lt;typename F&amp;gt;privDefer&amp;lt;F&amp;gt; defer_func(F f) {return privDefer&amp;lt;F&amp;gt;(f);}#define DEFER_1(x, y) x##y#define DEFER_2(x, y) DEFER_1(x, y)#define DEFER_3(x) DEFER_2(x, __COUNTER__)#define defer(code) auto DEFER_3(_defer_) = defer_func([&amp;amp;](){code;})Explanation One of the most common examples for this in Go is files.</description>
    </item>
    
  </channel>
</rss>
